(()=>{"use strict";var __webpack_modules__={94:()=>{eval('\n// UNUSED EXPORTS: createCard, formEditElement, getEditFormValue, handleOpenAddForm, modalGalleryElement, renderInitialCards\n\n;// CONCATENATED MODULE: ./src/components/validate.js\nfunction enableValidationForm(config) {\n  var formList = document.querySelectorAll(config.formSelector);\n  formList.forEach(function (formItem) {\n    formItem.addEventListener("reset", function () {\n      formItem.querySelectorAll(".modal__input-error").forEach(function (e) {\n        return e.innerText = "";\n      });\n    });\n    setEventListener(formItem, config);\n  });\n}\nenableValidationForm({\n  formSelector: ".modal__form",\n  inputSelector: ".modal__input",\n  submitButtonSelector: ".modal__btn",\n  inactiveButtonClass: "modal__btn-disabled",\n  inputErrorClass: "modal__input_type_error"\n});\nfunction setEventListener(formItem, config) {\n  var inputList = formItem.querySelectorAll(config.inputSelector);\n  var btnSubmit = formItem.querySelector(config.submitButtonSelector);\n  inputList.forEach(function (inputItem) {\n    inputItem.addEventListener("input", function () {\n      checkValidity(inputItem, formItem, config);\n      disabledButton(btnSubmit, formItem.checkValidity(), config);\n    });\n  });\n  formItem.addEventListener("submit", function (evt) {\n    evt.preventDefault();\n  });\n  formItem.addEventListener("reset", function (evt) {\n    disabledButton(btnSubmit, false, config);\n  });\n}\nfunction checkValidity(inputItem, formItem, config) {\n  var isInputValidity = inputItem.checkValidity();\n  var formErrorMessage = formItem.querySelector("#".concat(inputItem.name, "-error"));\n  if (isInputValidity) {\n    hideInputError(inputItem, formErrorMessage, config);\n  } else {\n    showInputError(inputItem, formErrorMessage, config);\n  }\n}\nfunction disabledButton(btnElement, isActive, config) {\n  if (isActive) {\n    btnElement.disabled = false;\n    btnElement.classList.remove(config.inactiveButtonClass);\n  } else {\n    btnElement.disabled = true;\n    btnElement.classList.add(config.inactiveButtonClass);\n  }\n}\nfunction showInputError(inputItem, formErrorMessage, config) {\n  inputItem.classList.add(config.inputErrorClass);\n  formErrorMessage.textContent = inputItem.validationMessage;\n}\nfunction hideInputError(inputItem, formErrorMessage, config) {\n  inputItem.classList.remove(config.inputErrorClass);\n  formErrorMessage.textContent = inputItem.validationMessage;\n}\n\n;// CONCATENATED MODULE: ./src/components/modal.js\nfunction openModalWindow(modal) {\n  modal.classList.add("modal__is-opened");\n  document.addEventListener("keydown", closeModalClick);\n}\n\n//закрытие модального окна\n\nfunction closeModalWindow(modal) {\n  modal.classList.remove("modal__is-opened");\n  document.removeEventListener("keydown", closeModalClick);\n}\nfunction closeModalClick(evt) {\n  if (evt.target === evt.currentTarget || evt.target.classList.contains("modal__btn-close") || evt.code === "Escape") {\n    var activeModal = document.querySelector(".modal.modal__is-opened");\n    closeModalWindow(activeModal);\n  }\n}\n\n;// CONCATENATED MODULE: ./src/components/api.js\nvar config = {\n  baseUrl: \'https://nomoreparties.co/v1/wbf-cohort-15\',\n  headers: {\n    authorization: \'bbf4eaaa-f328-4bc0-8623-4b1bddc04a3d\',\n    \'Content-Type\': \'application/json\'\n  }\n};\nfunction onResponse(res) {\n  return res.ok ? res.json() : res.json().then(function (error) {\n    return Promise.reject("\\u041E\\u0448\\u0438\\u0431\\u043A\\u0430: ".concat(error));\n  });\n}\nfunction getInitialCards() {\n  return fetch("".concat(config.baseUrl, "/cards"), {\n    headers: config.headers\n  }).then(onResponse);\n}\nfunction addCard(cardData) {\n  return fetch("".concat(config.baseUrl, "/cards"), {\n    method: "POST",\n    headers: config.headers,\n    body: JSON.stringify(cardData)\n  }).then(onResponse);\n}\nfunction deleteCard(cardId) {\n  return fetch("".concat(config.baseUrl, "/cards/").concat(cardId), {\n    method: "DELETE",\n    headers: config.headers\n  }).then(onResponse);\n}\n//\nfunction getUserInfo() {\n  return fetch("".concat(config.baseUrl, "/users/me"), {\n    headers: config.headers\n  }).then(onResponse);\n}\nfunction editProfile(dataProfile) {\n  return fetch("".concat(config.baseUrl, "/users/me"), {\n    method: "PATCH",\n    headers: config.headers,\n    body: JSON.stringify(dataProfile)\n  }).then(onResponse);\n}\nfunction updateLikes(cardId, liked) {\n  return fetch("".concat(config.baseUrl, "/cards/likes/").concat(cardId), {\n    method: liked ? "DELETE" : "PUT",\n    headers: config.headers\n  }).then(onResponse);\n}\nfunction updateUserAvatar(dataUserAvatar) {\n  return fetch("".concat(config.baseUrl, "/users/me/avatar"), {\n    method: "PATCH",\n    headers: config.headers,\n    body: JSON.stringify(dataUserAvatar)\n  }).then(onResponse);\n}\n;// CONCATENATED MODULE: ./src/components/main.js\nvar modalEditElement = document.querySelector(".modal_type_edit");\nvar modalAddElement = document.querySelector(".modal_type_add");\nvar modalGalleryElement = document.querySelector(".modal_type_img");\nvar modalEditAvatarEl = document.querySelector(".modal_type_edit_avatar");\nvar btnEditModal = document.querySelector(".profile__btn");\nvar btnAddModal = document.querySelector(".profile__button");\nvar btnEditAvatar = document.querySelector(".profile__info-btn");\nvar formEditElement = document.querySelector(".modal__form-edit");\nvar formAddElement = document.querySelector(".modal__form-add");\nvar formEditAvatar = document.querySelector(".modal__form-edit_avatar");\nvar picturesContainer = document.querySelector(".pictures__cards");\nvar modalImage = document.querySelector(".modal__img");\nvar modalCaption = document.querySelector(".modal__caption");\nvar inputName = document.querySelector(".modal__input-avatar-name");\nvar inputDescr = document.querySelector(".modal__input-avatar-descr");\nvar profileName = document.querySelector(".profile__avatar-name");\nvar profileDescription = document.querySelector(".profile__avatar-description");\nvar userAvatarImg = document.querySelector(".profile__avatar");\nvar inputGetName = formAddElement.querySelector(".modal__input-name");\nvar inputGetLink = formAddElement.querySelector(".modal__input-link");\nvar modalInputUsersAvatar = formEditAvatar.querySelector(".modal__input-avatar");\nvar btnSubmitElements = document.querySelectorAll(\'.modal__btn\');\n\n;// CONCATENATED MODULE: ./src/components/card.js\n\n\n\n\n// добавление и отрисовка карточек\n\nfunction createCard(_ref, myId) {\n  var name = _ref.name,\n    link = _ref.link,\n    likes = _ref.likes,\n    owner = _ref.owner,\n    _id = _ref._id;\n  var pictureElement = document.querySelector(".pictures-template").content.querySelector(\'.picture\').cloneNode(true);\n  var picturesCardImg = pictureElement.querySelector(".picture__card-img");\n  var picturesCardTitle = pictureElement.querySelector(".picture__card-title");\n  var btnDeleteCard = pictureElement.querySelector(".modal__btb-delete");\n  var btnLike = pictureElement.querySelector(".picture__card-btn");\n  var likesCounter = pictureElement.querySelector(\'.picture__counter\');\n  var userId = owner._id;\n  var cardId = _id;\n  var myLike = likes.find(function (like) {\n    return like._id === myId;\n  });\n  var liked = myLike !== undefined;\n  picturesCardTitle.textContent = name;\n  picturesCardImg.src = link;\n  picturesCardImg.alt = name;\n  if (liked === true) {\n    btnLike.classList.add("picture__card-btn--active");\n  } else {\n    btnLike.classList.remove("picture__card-btn--active");\n  }\n  likesCounter.textContent = likes.length;\n  btnLike.addEventListener("click", function () {\n    updateLikes(cardId, liked).then(function (response) {\n      likesCounter.textContent = response.likes.length;\n      liked = !liked;\n      btnLike.classList.toggle("picture__card-btn--active");\n    }).catch(function (error) {\n      console.log(error);\n    });\n  });\n  picturesCardImg.addEventListener("click", function () {\n    modalImage.src = link;\n    modalImage.alt = name;\n    modalCaption.innerHTML = name;\n    openModalWindow(modalGalleryElement);\n  });\n  if (userId === myId) {\n    btnDeleteCard.addEventListener("click", function () {\n      deleteCard(cardId).then(function (e) {\n        pictureElement.remove();\n      }).catch(function (error) {\n        console.log(error);\n      });\n    });\n  } else {\n    btnDeleteCard.style.display = \'none\';\n  }\n  return pictureElement;\n}\n\n;// CONCATENATED MODULE: ./src/components/index.js\n\n\n\n\n\n\nfunction setStatusBtn(_ref) {\n  var btn = _ref.btn,\n    text = _ref.text,\n    disabled = _ref.disabled;\n  if (!disabled) {\n    btn.disabled = false;\n  } else {\n    btn.disabled = \'disabled\';\n  }\n  btn.textContent = text;\n}\nfunction submitElemAdd() {\n  btnSubmitElements.forEach(function (btnSubmitElem) {\n    setStatusBtn({\n      btn: btnSubmitElem,\n      text: \'Сохранение...\',\n      disabled: true\n    });\n  });\n}\nfunction submitElemDel() {\n  btnSubmitElements.forEach(function (btnSubmitElem) {\n    setStatusBtn({\n      btn: btnSubmitElem,\n      text: \'Сохранить\',\n      disabled: false\n    });\n  });\n}\nfunction getEditFormValue(evt) {\n  evt.preventDefault();\n  submitElemAdd();\n  var nameValue = inputName.value;\n  var descrValue = inputDescr.value;\n  var profileData = {\n    name: nameValue,\n    about: descrValue\n  };\n  editProfile(profileData).then(function (dataFromServer) {\n    profileName.textContent = dataFromServer.name;\n    profileDescription.textContent = dataFromServer.about;\n  }).catch(function (error) {\n    console.log(error);\n  }).finally(function () {\n    submitElemDel();\n  });\n  closeModalClick(evt);\n}\nfunction handleOpenAddForm(evt) {\n  evt.preventDefault();\n  submitElemAdd();\n  var nameValue = inputGetName.value;\n  var linkValue = inputGetLink.value;\n  var cardData = {\n    name: nameValue,\n    link: linkValue\n  };\n  addCard(cardData).then(function (response) {\n    renderCard(response, response.owner._id);\n    closeModalClick(evt);\n    formEditElement.reset();\n  }).catch(function (error) {\n    console.log(error);\n  }).finally(function () {\n    submitElemDel();\n  });\n  closeModalClick(evt);\n}\nfunction handleEditAvatarElement(evt) {\n  evt.preventDefault();\n  submitElemAdd();\n  var userAvatarValue = modalInputUsersAvatar.value;\n  var userAvatar = {\n    avatar: userAvatarValue\n  };\n  updateUserAvatar(userAvatar).then(function (e) {\n    userAvatarImg.src = userAvatar.avatar;\n    closeModalClick(evt);\n  }).catch(function (error) {\n    console.log(error);\n  }).finally(function () {\n    submitElemDel();\n  });\n  closeModalClick(evt);\n}\nfunction renderCard(data, myId) {\n  var newCard = createCard(data, myId);\n  picturesContainer.prepend(newCard);\n}\nfunction renderInitialCards(myId) {\n  getInitialCards().then(function (cards) {\n    cards.sort(function (a, b) {\n      return new Date(a.createdAt) - new Date(b.createdAt);\n    });\n    cards.forEach(function (data) {\n      return renderCard(data, myId);\n    });\n  }).catch(function (error) {\n    console.log(error);\n  });\n}\nfunction renderInitialUserInfo() {\n  getUserInfo().then(function (response) {\n    profileName.textContent = response.name;\n    profileDescription.textContent = response.about;\n    userAvatarImg.src = response.avatar;\n    renderInitialCards(response._id);\n  }).catch(function (error) {\n    console.log(error);\n  });\n}\nformEditElement.addEventListener("submit", getEditFormValue);\nformAddElement.addEventListener("submit", handleOpenAddForm);\nformEditAvatar.addEventListener("submit", handleEditAvatarElement);\nbtnEditModal.addEventListener("click", function () {\n  formEditElement.reset();\n  inputName.value = profileName.innerText;\n  inputDescr.value = profileDescription.innerText;\n  openModalWindow(modalEditElement);\n});\nbtnAddModal.addEventListener("click", function () {\n  formAddElement.reset();\n  openModalWindow(modalAddElement);\n});\nbtnEditAvatar.addEventListener("click", function () {\n  formEditAvatar.reset();\n  openModalWindow(modalEditAvatarEl);\n});\nmodalEditElement.addEventListener("mousedown", closeModalClick);\nmodalAddElement.addEventListener("mousedown", closeModalClick);\nmodalGalleryElement.addEventListener("mousedown", function () {\n  return closeModalClick(modalGalleryElement);\n});\nmodalEditAvatarEl.addEventListener("mousedown", closeModalClick);\nrenderInitialUserInfo();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///94\n')}},__webpack_exports__={};__webpack_modules__[94]()})();